// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EfCoreApp.Sdk
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ASPNETCoreEntityFrameworkApi.
    /// </summary>
    public static partial class ASPNETCoreEntityFrameworkApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Cart GetCart(this IASPNETCoreEntityFrameworkApi operations)
            {
                return operations.GetCartAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Cart> GetCartAsync(this IASPNETCoreEntityFrameworkApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCartWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void BuyCart(this IASPNETCoreEntityFrameworkApi operations)
            {
                operations.BuyCartAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BuyCartAsync(this IASPNETCoreEntityFrameworkApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BuyCartWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// </param>
            /// <param name='quantity'>
            /// </param>
            public static void AddItemToCart(this IASPNETCoreEntityFrameworkApi operations, int productId, int quantity)
            {
                operations.AddItemToCartAsync(productId, quantity).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// </param>
            /// <param name='quantity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddItemToCartAsync(this IASPNETCoreEntityFrameworkApi operations, int productId, int quantity, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddItemToCartWithHttpMessagesAsync(productId, quantity, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// </param>
            public static void RemoveItemFromCart(this IASPNETCoreEntityFrameworkApi operations, int productId)
            {
                operations.RemoveItemFromCartAsync(productId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveItemFromCartAsync(this IASPNETCoreEntityFrameworkApi operations, int productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveItemFromCartWithHttpMessagesAsync(productId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Product> GetProducts(this IASPNETCoreEntityFrameworkApi operations)
            {
                return operations.GetProductsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Product>> GetProductsAsync(this IASPNETCoreEntityFrameworkApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static AddProductResponse AddProduct(this IASPNETCoreEntityFrameworkApi operations, AddProductRequest request = default(AddProductRequest))
            {
                return operations.AddProductAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddProductResponse> AddProductAsync(this IASPNETCoreEntityFrameworkApi operations, AddProductRequest request = default(AddProductRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddProductWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Product GetProduct(this IASPNETCoreEntityFrameworkApi operations, int id)
            {
                return operations.GetProductAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Product> GetProductAsync(this IASPNETCoreEntityFrameworkApi operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='product'>
            /// </param>
            public static void UpdateProduct(this IASPNETCoreEntityFrameworkApi operations, int id, UpdateProductRequest product = default(UpdateProductRequest))
            {
                operations.UpdateProductAsync(id, product).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateProductAsync(this IASPNETCoreEntityFrameworkApi operations, int id, UpdateProductRequest product = default(UpdateProductRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateProductWithHttpMessagesAsync(id, product, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteProduct(this IASPNETCoreEntityFrameworkApi operations, int id)
            {
                operations.DeleteProductAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProductAsync(this IASPNETCoreEntityFrameworkApi operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProductWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
